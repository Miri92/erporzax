@import "vars";

/* ==== Media queries ==== */

@mixin breakpoint($bp) {
  @media screen and (max-width: $bp) {
    @content;
  }
}

@mixin bp-large {
  @media only screen and (max-width: 60em) {
    @content;
  }
}
@mixin bp-medium {
  @media only screen and (max-width: 40em) {
    @content;
  }
}
@mixin bp-small {
  @media only screen and (max-width: 30em) {
    @content;
  }
}

// @mixin screen($size, $type: max, $pixels: $breakpoint-small) {
//   @if $size == "small" {
//     @media screen and ($type + -width: $breakpoint-small) {
//       @content;
//     }
//   } @else if $size == "med-small" {
//     @media screen and ($type + -width: $breakpoint-med-small) {
//       @content;
//     }
//   } @else if $size == "med" {
//     @media screen and ($type + -width: $breakpoint-med) {
//       @content;
//     }
//   } @else if $size == "large" {
//     @media screen and ($type + -width: $breakpoint-med) {
//       @content;
//     }
//   } @else if $size == "custom" {
//     @media screen and ($type + -width: $pixels + px) {
//       @content;
//     }
//   } @else {
//     @content;
//   }
// }

/* ==== Scrollbars ==== */

@mixin scrollbars($size, $border-radius, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
  // For Google Chrome
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
    border-radius: $border-radius;
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
    border-radius: $border-radius;
  }

  // For Internet Explorer
  & {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

/* ==== Theme styling ====*/

@mixin theme($name, $color) {
  // Define colors in your theme
  $primary: $color;
  $secondary: lighten(adjust-hue($color, 20), 10%);
  // Add your classes with css colors added
  .#{$name} {
    .element {
      color: $primary;
    }
    .other-element {
      background: $secondary;
    }
  }
}

/* ==== Centering ====*/

@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

/* ==== Input fields ====*/

%default_field {
  padding: $input_paddings;
  // max-width: $input_width;
  // min-width: $input_width;
  height: $input_height;
  color: $input_text_color;
  border-radius: $input_radius;
  border: $input_border;
  -webkit-appearance: none;
  background-color: $input_background_color;

  &::placeholder {
    color: $input_placeholder_color;
  }
}

// input
// &__input {
//   @extend %default_field !optional;

//   &[disabled] {
//     background-color: #d6d6d6;
//   }
// }

/* ==== Table ====*/

@mixin table-base {
  th {
    text-align: center;
    font-weight: bold;
  }
  td,
  th {
    padding: 2px;
  }
}

@mixin left($dist) {
  float: left;
  margin-left: $dist;
}

#data {
  @include left(10px);
  @include table-base;
}

/* ==== External Fonts ====*/

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + ".eot");
    src:
      url($file-name + ".eot?#iefix") format("embedded-opentype"),
      url($file-name + ".woff") format("woff"),
      url($file-name + ".ttf") format("truetype"),
      url($file-name + ".svg##{$font-name}") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size) !important;
}

//Font-style
@mixin font-style($fs, $fw, $lh) {
  @include font-size($fs);
  font-weight: $fw !important;
  line-height: $lh !important;
}
/* ==== Quick Padding & Margins ====*/

//Padding mixin
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}
//Margin mixin
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

//--- Animations ---

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

//---Transitions---

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

//---Opacity---

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

//---ClearFix---

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/* ==== Retina Images ====*/

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

/* ==== Quick Gradients ====*/

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

//--- Hide Stuffs ---

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//--- Transform ---

@mixin transform($val) {
  -webkit-transform: $val !important;
  -moz-transform: $val !important;
  -ms-transform: $val !important;
  transform: $val !important;
}

//--- Text-shadow ---

@mixin text-shadow($top: 3px, $left: 3px, $blur: 3px, $colour: #333) {
  -webkit-text-shadow: $top $left $blur $colour;
  -moz-text-shadow: $top $left $blur $colour;
  -o-text-shadow: $top $left $blur $colour;
  text-shadow: $top $left $blur $colour;
}

//--- box-shadow ---

@mixin box-shadow($top: 3px, $left: 3px, $blur: 4px, $colour: #444, $inset: "") {
  -webkit-box-shadow: #{$inset} $top $left $blur $colour;
  -moz-box-shadow: #{$inset} $top $left $blur $colour;
  box-shadow: #{$inset} $top $left $blur $colour;
}

//---border-radius ---

@mixin rounded-corners($tl: 4px, $tr: 4px, $br: 4px, $bl: 4px) {
  -webkit-border-radius: $tl $tr $br $bl !important;
  -moz-border-radius: $tl $tr $br $bl !important;
  -o-border-radius: $tl $tr $br $bl !important;
  border-radius: $tl $tr $br $bl !important;
}

// Used to @include a cursor within a pre-existing class
@mixin cursor($cursor-type) {
  cursor: $cursor-type;
}

// Used to generate cursor classes
@mixin cursor-class($cursor-type) {
  .cursor__#{$cursor-type} {
    cursor: $cursor-type;
  }
}
